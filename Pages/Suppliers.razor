@page "/suppliers"
@inject InventoryManagement.Data.ApplicationDbContext Db
@using Microsoft.EntityFrameworkCore

<h3>Suppliers</h3>

<div class="mb-3">
    <input class="form-control" @bind="newName" placeholder="New supplier name" />
    <input class="form-control mt-2" @bind="newEmail" placeholder="Contact email" />
    <button class="btn btn-primary mt-2" @onclick="Create">Add Supplier</button>
</div>

<table class="table table-striped">
    <thead>
        <tr><th>Name</th><th>Email</th><th>Phone</th><th></th></tr>
    </thead>
    <tbody>
        @foreach (var s in suppliers)
        {
            <tr>
                <td>@(editId == s.Id ? (MarkupString)$"<input class='form-control' @bind='editName' />" : s.Name)</td>
                <td>@(editId == s.Id ? (MarkupString)$"<input class='form-control' @bind='editEmail' />" : s.ContactEmail)</td>
                <td>@(editId == s.Id ? (MarkupString)$"<input class='form-control' @bind='editPhone' />" : s.PhoneNumber)</td>
                <td>
                    @if (editId == s.Id)
                    {
                        <button class="btn btn-sm btn-success" @onclick="() => SaveEdit(s.Id)">Save</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => StartEdit(s)">Edit</button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(s.Id)">Delete</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Supplier> suppliers = new();
    string newName = "", newEmail = "", newPhone = "";
    int? editId;
    string editName = "", editEmail = "", editPhone = "";

    protected override async Task OnInitializedAsync()
    {
        suppliers = await Db.Suppliers.OrderBy(s => s.Name).ToListAsync();
    }

    async Task Create()
    {
        if (string.IsNullOrWhiteSpace(newName)) return;
        var s = new Supplier { Name = newName.Trim(), ContactEmail = newEmail?.Trim() ?? "", PhoneNumber = newPhone?.Trim() ?? "" };
        Db.Suppliers.Add(s);
        await Db.SaveChangesAsync();
        newName = newEmail = newPhone = "";
        suppliers = await Db.Suppliers.OrderBy(x => x.Name).ToListAsync();
    }

    void StartEdit(Supplier s)
    {
        editId = s.Id;
        editName = s.Name;
        editEmail = s.ContactEmail;
        editPhone = s.PhoneNumber;
    }

    void CancelEdit() => editId = null;

    async Task SaveEdit(int id)
    {
        var s = await Db.Suppliers.FindAsync(id);
        if (s != null)
        {
            s.Name = editName;
            s.ContactEmail = editEmail;
            s.PhoneNumber = editPhone;
            await Db.SaveChangesAsync();
            suppliers = await Db.Suppliers.OrderBy(x => x.Name).ToListAsync();
            editId = null;
        }
    }

    async Task Delete(int id)
    {
        var s = await Db.Suppliers.FindAsync(id);
        if (s != null)
        {
            Db.Suppliers.Remove(s);
            await Db.SaveChangesAsync();
            suppliers = await Db.Suppliers.OrderBy(x => x.Name).ToListAsync();
        }
    }
}
