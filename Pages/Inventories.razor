@using Microsoft.EntityFrameworkCore
@page "/inventories"
@inject ApplicationDbContext Db

<h3>ðŸ“¦ Inventories</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="NewInventory">Add New Inventory</button>

    @if (showForm)
    {
        <EditForm Model="newInventory" OnValidSubmit="SaveInventory">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label>Title</label>
                <InputText class="form-control" @bind="newInventory.Title" />
            </div>

            <div class="mb-3">
                <label>Description</label>
                <InputTextArea class="form-control" @bind="newInventory.Description" />
            </div>

            <button type="submit" class="btn btn-success">ðŸ’¾ Save</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
        </EditForm>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inv in inventories)
                {
                    <tr>
                        <td>@inv.Title</td>
                        <td>@inv.Description</td>
                        <td>@inv.CreatedAt.ToLocalTime()</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => Delete(inv.Id)">ðŸ—‘ Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<Inventory> inventories = new();
    private Inventory newInventory = new();
    private bool showForm = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        inventories = await Db.Inventories.OrderByDescending(x => x.CreatedAt).ToListAsync();
        isLoading = false;
    }

    void NewInventory()
    {
        newInventory = new();
        showForm = true;
    }

    void Cancel() => showForm = false;

    async Task SaveInventory()
    {
        Db.Inventories.Add(newInventory);
        await Db.SaveChangesAsync();
        showForm = false;
        inventories = await Db.Inventories.ToListAsync();
    }

    async Task Delete(int id)
    {
        var inv = await Db.Inventories.FindAsync(id);
        if (inv != null)
        {
            Db.Inventories.Remove(inv);
            await Db.SaveChangesAsync();
            inventories = await Db.Inventories.ToListAsync();
        }
    }
}
