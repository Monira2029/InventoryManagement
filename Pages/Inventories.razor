@page "/inventories"
@inject ApplicationDbContext Db

<h3>Inventories</h3>

<div class="mb-3">
    <input class="form-control" @bind="newInventory.Title" placeholder="New Inventory Title" />
    <textarea class="form-control mt-2" @bind="newInventory.Description" placeholder="Description"></textarea>
    <button class="btn btn-primary mt-2" @onclick="CreateInventory">Add</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Created</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var inv in inventories)
        {
            <tr>
                <td>@inv.Title</td>
                <td>@inv.Description</td>
                <td>@inv.CreatedAt.ToShortDateString()</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteInventory(inv.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Inventory> inventories = new();
    private Inventory newInventory = new();

    protected override async Task OnInitializedAsync()
    {
        inventories = Db.Inventories.ToList();
    }

    private async Task CreateInventory()
    {
        if (!string.IsNullOrWhiteSpace(newInventory.Title))
        {
            Db.Inventories.Add(newInventory);
            await Db.SaveChangesAsync();
            inventories.Add(newInventory);
            newInventory = new Inventory();
        }
    }

    private async Task DeleteInventory(int id)
    {
        var item = await Db.Inventories.FindAsync(id);
        if (item != null)
        {
            Db.Inventories.Remove(item);
            await Db.SaveChangesAsync();
            inventories.Remove(item);
        }
    }
}
