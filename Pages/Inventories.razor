@page "/inventories"
@using InventoryManagement.Models
@inject ApplicationDbContext _context
@inject NavigationManager Navigation

<h3 class="mb-3">Inventories</h3>

<input class="form-control mb-3" @bind="searchText" placeholder="Search inventories..." />

<button class="btn btn-primary mb-3" @onclick="ShowAddModal">‚ûï Add Inventory</button>

@if (filteredInventories == null)
{
    <p><em>Loading...</em></p>
}
else if (filteredInventories.Count == 0)
{
    <p>No inventories found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Created</th>
                <th>Public</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inv in filteredInventories)
            {
                <tr>
                    <td>@inv.Title</td>
                    <td>@inv.Category</td>
                    <td>@inv.CreatedAt.ToShortDateString()</td>
                    <td>@(inv.IsPublic ? "‚úÖ" : "‚ùå")</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1" @onclick="() => EditInventory(inv)">‚úèÔ∏è</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteInventory(inv.Id)">üóëÔ∏è</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Inventory> filteredInventories;
    private string searchText = "";
    private bool showAddModal = false;
    private Inventory newInventory = new();

    protected override void OnInitialized()
    {
        filteredInventories = _context.Inventories.ToList();
    }

    private void ShowAddModal()
    {
        newInventory = new();
        showAddModal = true;
    }

    private void AddInventory()
    {
        _context.Inventories.Add(newInventory);
        _context.SaveChanges();
        filteredInventories = _context.Inventories.ToList();
        showAddModal = false;
    }

    private void EditInventory(Inventory inv)
    {
        newInventory = inv;
        showAddModal = true;
    }

    private void DeleteInventory(int id)
    {
        var inv = _context.Inventories.Find(id);
        if (inv != null)
        {
            _context.Inventories.Remove(inv);
            _context.SaveChanges();
            filteredInventories = _context.Inventories.ToList();
        }
    }

    private List<Inventory> SearchInventories(string text)
    {
        return _context.Inventories
            .Where(i => i.Title.Contains(text, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OnSearch(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        filteredInventories = SearchInventories(searchText);
    }
}
